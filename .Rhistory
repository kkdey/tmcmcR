devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(tmcmcR)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=10;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 2000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(tmcmcR)
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
Rcpp::compileAttributes()
tmcmcUpdate <- function(x, b, eps, f) {
.Call('tmcmcR_tmcmcUpdate', PACKAGE = 'tmcmcR', x, b, eps, f)
}
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(Rcpp)
sourceCpp('src/utils.cpp')
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
Rcpp::compileAttributes()
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
source('~/Documents/tmcmcR/R/rwmh_metrop.R')
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
source('~/Documents/tmcmcR/R/rwmh_metrop.R')
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(Rcpp)
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
getwd()
library(tmcmcR)
library(tmcmcR)
library(tmcmcR)
sessionInfo()
library(roxygen2)
sessionInfo()
install_version("roxygen2", version = "4.1.1", repos = "http://cran.us.r-project.org")
library(devtools)
install_version("roxygen2", version = "4.1.1", repos = "http://cran.us.r-project.org")
library(roxygen2)
devtools::document()
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
install.packages("mcmc")
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(devtools)
library(Rcpp)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(Rcpp)
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
install.packages("devtools")
library(devtools)
sessionInfo()
install_github('kkdey/tmcmcR')
library(tmcmcR)
rm(list=ls())
library(tmcmcR)
update.packages("roxygen2")
library(roxygen2)
library(tmcmcR)
sessionInfo()
library(tmcmcR)
sessionInfo()
install.packages("roxygen2")
install.packages("roxygen2")
library(roxygen2)
sessionInfo()
library(tmcmcR)
library(tmcmcR)
Rcpp.package.skeleton("tmcmcR", attributes=TRUE)
library(Rcpp)
Rcpp.package.skeleton("tmcmcR", attributes=TRUE)
Rcpp.package.skeleton("tmcmcR", attributes=TRUE, cpp_files = "src/utils.cpp")
Rcpp.package.skeleton("tmcmcR", attributes=TRUE, cpp_files = "src/utils.cpp")
devtools::document()
library(tmcmcR)
devtools::document()
library(tmcmcR)
library(tmcmcR)
library(roxygen2)
library(Rcpp)
tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000, verb=FALSE))
tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000, verb=FALSE)
library(tmcmcR)
devtools::document()
library(tmcmcR)
d=50;  ##  dimension of the simulated variable
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1); ## the starting point generated independently from N(0,1)
tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000, verb=FALSE)
Rcpp::compileAttributes()
library(tmcmcR)
tmcmcR::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(devtools)
library(tmcmcR2)
library(Rcpp)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
remove.packages("tmcmcR2")
library(devtools)
library(tmcmcR)
library(Rcpp)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
