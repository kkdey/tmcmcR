{
return (dnorm(x))
}
getwd()
setwd('/Users/kushal/Documents/tmcmc/tmcmcR')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
mean <- c(0,0,0);
Sd <- diag(3);
Sd
normpdf <- function(x)
{
return (dnorm(x,mean,Sd))
}
normpdf(c(1,2,1))
dmvnorm(x,mean,Sd)
library(mvtnorm)
dmvnorm(x,mean,Sd)
normpdf(c(1,2,1))
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd))
}
normpdf(c(1,2,1))
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(1,2,1),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
normpdf(c(-400,-400,-400))
normpdf(c(100,100,100))
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
normpdf(c(-400,-400,-400))
sourceCpp(tmcmc_update.cpp)
sourceCpp("tmcmc_update.cpp")
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
library(numDeriv)
hessian(normpdf,c(0,1,2))
eigen(hessian(normpdf,c(0,1,2)))
b <- sample(c(-1,+1),3)
b <- sample(c(-1,+1),3,replace=TRUE)
b
b <- sample(c(-1,+1),10,replace=TRUE)
b
b <- sample(c(-1,+1),20,replace=TRUE)
b
is.list(b)
is.matrix(b)
is.array(b)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
getwd()
sourceCpp('src/utils.cpp')
library(Rcpp)
sourceCpp('src/utils.cpp')
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
library(mvtnorm)
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)$chain
devtools::document()
devtools::document()
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
normpdf(c(-400,-400,-400))
normpdf(c(100,100,100))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
x_temp <- rand_generate(pdf_2, method=method);
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
devtools::document()
devtools::document()
source('~/Documents/tmcmcR/R/rand_generate.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
devtools::document()
devtools::document()
devtools::document()
3 %% 500
3 %% 500 ==0
500 %% 500
library(Rcpp)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("my-vignette")
devtools::document()
devtools::use_rcpp()
Rcpp::sourceCpp('src/utils.cpp')
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x,mu_target, Sigma_target)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
pdf()
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=1000,burn_in = NULL)
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
num=1;
burn_in=NULL
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
num=1;
chain[1,] <- base;
num <- 1
eps <- rnorm(1,0,scale);
scale <- 1
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
target_pdf <- pdf
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
chain[1,]
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- 100
if(num %% 100 ==0)
+       paste("The chain is at iteration:",num);
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
nsamples <- 1000
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
}
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
#if(num %% 100 ==0)
paste("The chain is at iteration:",num);
}
num
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
paste("The chain is at iteration:",num);
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- num +1;
}
chain
dim(chain)
chain <- matrix(0, nsamples, length(base))
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
nsamples
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num=2;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
nsamples
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
while(num <= nsamples) {
num=num+1;
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
}
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 1
while(num <= nsamples) {
num=num+1;
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
}
num
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num + 1;
}
dim(chain)
1000 %% 100
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
# if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num + 1;
}
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=1000,burn_in = NULL)
out
```{r echo=TRUE, eval=FALSE}
library(tmcmcR)
devtools::document()
library(tmcmcR)
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
out
library(tmcmcR)
library(tmcmcR)
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
paste("We are at iter:",l)
}
KSval_TMCMC=array(0,nsamples);
KSval_MCMC=array(0,nsamples);
for(d in 1:40)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
KSval_MCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_MCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("TMCMC","RWMH"),fill=c("red","blue"),border="black");
}
nsamples
dim(Mult_Mattingly[1,1,,])
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
cat("We are at iter:",l)
}
KSval_TMCMC=array(0,nsamples);
KSval_MCMC=array(0,nsamples);
for(d in 1:40)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_MCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_MCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("TMCMC","RWMH"),fill=c("red","blue"),border="black");
}
