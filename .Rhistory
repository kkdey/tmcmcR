{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
l <- 1
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=3000, verb=FALSE)$chain;
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=3000, verb=TRUE)$chain;
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100, nsamples=3000, verb=TRUE)$chain;
devtools::document()
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=25; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=3000, verb=FALSE)$chain;
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100, nsamples=3000, verb=FALSE)$chain;
cat("We are at iter:",l, "\n")
}
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=20; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=2000, verb=FALSE)$chain;
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100, nsamples=2000, verb=FALSE)$chain;
cat("We are at iter:",l, "\n")
}
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100, nsamples=1000, verb=FALSE)$chain;
if(is.null(burn_in)) burn_in <- nsamples/3;
if(is.null(scale)) stop("scale value not provided")
if(is.null(beta_set)) stop("set of inverse temperatures not provided")
rmc3_chains <- vector("list", length(beta_set));
num = 1
while(num <= nsamples){
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rmc3_chains[[k]][(num-1),];
eps <- rnorm(length(temp_chain),0,scale);
temp_chain <- rwmhUpdate(temp_chain,eps,target_pdf)$chain;
out <- rbind(rmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rmc3_chains <- chain_set;
if(num %% cycle ==0)
{
indices <- sample(1:length(beta_set), 2);
chain1 <- rmc3_chains[[k]][indices[1],];
chain2 <- rmc3_chains[[k-1]][indices[2],];
swap_rate <- min(1, exp((beta_set[k] - beta_set[(k-1)])*(target_pdf(chain2)-target_pdf(chain1))));
w <- runif(1,0,1)
if(w < swap_rate){
rmc3_chains[[indices[1]]][num,] <- chain2;
rmc3_chains[[indices[2]]][num,] <- chain1;
}
}
if(num %% 500 ==0){
if(verb){
cat("The chain is at iteration:",num,"\n");
}
}
num <- num + 1;
}
cycle <- 100
while(num <= nsamples){
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rmc3_chains[[k]][(num-1),];
eps <- rnorm(length(temp_chain),0,scale);
temp_chain <- rwmhUpdate(temp_chain,eps,target_pdf)$chain;
out <- rbind(rmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rmc3_chains <- chain_set;
if(num %% cycle ==0)
{
indices <- sample(1:length(beta_set), 2);
chain1 <- rmc3_chains[[k]][indices[1],];
chain2 <- rmc3_chains[[k-1]][indices[2],];
swap_rate <- min(1, exp((beta_set[k] - beta_set[(k-1)])*(target_pdf(chain2)-target_pdf(chain1))));
w <- runif(1,0,1)
if(w < swap_rate){
rmc3_chains[[indices[1]]][num,] <- chain2;
rmc3_chains[[indices[2]]][num,] <- chain1;
}
}
if(num %% 500 ==0){
if(verb){
cat("The chain is at iteration:",num,"\n");
}
}
num <- num + 1;
}
posterior_mean <- apply(rmc3_chains[[1]][round(burn_in):nsamples,], 2, mean);
ll <- list("chain_set"=rmc3_chains,"post.mean"=posterior_mean);
ll
ll$chain_set[[1]]
ll$chain_set[[1]]
beta_set[k]*target_pdf
target_pdf1 <- function(x) { return(beta_set[k]*target_pdf(x))};
target_pdf1()
target_pdf1
target_pdf(base)
target_pdf1(base)
beta_set1
beta_set[1]
beta_set[k]*target_pdf(base)
target_pdf(base)
k
devtools::document()
install_github('kkdey/tmcmcR')
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=10; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
length(beta_set)
l <- 1
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=5000, verb=FALSE)$chain_set[[1]];
Mult_Mattingly[1,1,,]
dim(Mult_Mattingly[1,1,,])
## Running tmcmcR on some simple illustrative examples
## RTMC-3 (Randomized Transformation based Maetropolis Couple Markov Chain Monte Carlo) application
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=10; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=5);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100, nsamples=5000, verb=FALSE)$chain_set[[1]];
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100, nsamples=5000, verb=FALSE)$chain_set[[1]];
cat("We are at iter:",l, "\n")
}
KSval1=array(0,nsamples);
KSval2=array(0,nsamples);
for(d in 1:40)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval1[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval2[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval1,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval2,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("RTMC3","RMC3"),fill=c("red","blue"),border="black");
}
devtools::document()
devtools::document()
install_github('kkdey/tmcmcR')
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=10;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=100,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=100,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
cat("We are at iter:",l, "\n")
}
target_pdf <- pdf
if(is.null(burn_in)) burn_in <- nsamples/3;
if(is.null(scale)) stop("scale value not provided")
if(is.null(beta_set)) stop("set of inverse temperatures not provided")
base
rtmc3_chains <- vector("list", length(beta_set));
num = 1
while(num <= nsamples){
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rtmc3_chains[[k]][(num-1),];
eps <- abs(rnorm(1,0,scale));
b <- sample(c(-1,+1),length(base),replace=TRUE);
temp_chain <- tmcmcUpdate(temp_chain,b,eps,function(x) return(beta_set[k]*target_pdf(x)))$chain;
out <- rbind(rtmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rtmc3_chains <- chain_set;
num <- 1
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rtmc3_chains[[k]][(num-1),];
eps <- abs(rnorm(1,0,scale));
b <- sample(c(-1,+1),length(base),replace=TRUE);
temp_chain <- tmcmcUpdate(temp_chain,b,eps,function(x) return(beta_set[k]*target_pdf(x)))$chain;
out <- rbind(rtmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rtmc3_chains <- chain_set;
if(num %% cycle ==0)
{
if(swap_adjacent)
{
index_select <- sample(2:length(beta_set), 1);
indices <- c(index_select-1, index_select);
}
if(!swap_adjacent)
{
indices <- sample(1:length(beta_set), 2);
}
chain1 <- rtmc3_chains[[k]][indices[1],];
chain2 <- rtmc3_chains[[k-1]][indices[2],];
swap_rate <- min(1, exp((beta_set[k] - beta_set[(k-1)])*(target_pdf(chain2)-target_pdf(chain1))));
w <- runif(1,0,1)
if(w < swap_rate){
rtmc3_chains[[indices[1]]][num,] <- chain2;
rtmc3_chains[[indices[2]]][num,] <- chain1;
}
}
while(num <= nsamples){
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rtmc3_chains[[k]][(num-1),];
eps <- abs(rnorm(1,0,scale));
b <- sample(c(-1,+1),length(base),replace=TRUE);
temp_chain <- tmcmcUpdate(temp_chain,b,eps,function(x) return(beta_set[k]*target_pdf(x)))$chain;
out <- rbind(rtmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rtmc3_chains <- chain_set;
if(num %% cycle ==0)
{
if(swap_adjacent)
{
index_select <- sample(2:length(beta_set), 1);
indices <- c(index_select-1, index_select);
}
if(!swap_adjacent)
{
indices <- sample(1:length(beta_set), 2);
}
chain1 <- rtmc3_chains[[k]][indices[1],];
chain2 <- rtmc3_chains[[k-1]][indices[2],];
swap_rate <- min(1, exp((beta_set[k] - beta_set[(k-1)])*(target_pdf(chain2)-target_pdf(chain1))));
w <- runif(1,0,1)
if(w < swap_rate){
rtmc3_chains[[indices[1]]][num,] <- chain2;
rtmc3_chains[[indices[2]]][num,] <- chain1;
}
}
if(num %% 500 ==0){
if(verb){
cat("The chain is at iteration:",num,"\n");
}
}
num <- num + 1;
}
swap_adjacent=TRUE
while(num <= nsamples){
chain_set <- parallel::mclapply(1:length(beta_set),
function(k){
if(num==1){
chain <- t(as.matrix(base, nrow=1));
out <- chain;
}
if(num > 1)
{
temp_chain <- rtmc3_chains[[k]][(num-1),];
eps <- abs(rnorm(1,0,scale));
b <- sample(c(-1,+1),length(base),replace=TRUE);
temp_chain <- tmcmcUpdate(temp_chain,b,eps,function(x) return(beta_set[k]*target_pdf(x)))$chain;
out <- rbind(rtmc3_chains[[k]],as.vector(temp_chain));
}
return(out)
}, mc.cores=detectCores()
)
rtmc3_chains <- chain_set;
if(num %% cycle ==0)
{
if(swap_adjacent)
{
index_select <- sample(2:length(beta_set), 1);
indices <- c(index_select-1, index_select);
}
if(!swap_adjacent)
{
indices <- sample(1:length(beta_set), 2);
}
chain1 <- rtmc3_chains[[k]][indices[1],];
chain2 <- rtmc3_chains[[k-1]][indices[2],];
swap_rate <- min(1, exp((beta_set[k] - beta_set[(k-1)])*(target_pdf(chain2)-target_pdf(chain1))));
w <- runif(1,0,1)
if(w < swap_rate){
rtmc3_chains[[indices[1]]][num,] <- chain2;
rtmc3_chains[[indices[2]]][num,] <- chain1;
}
}
if(num %% 500 ==0){
if(verb){
cat("The chain is at iteration:",num,"\n");
}
}
num <- num + 1;
}
posterior_mean <- apply(rtmc3_chains[[1]][round(burn_in):nsamples,], 2, mean);
ll <- list("chain_set"=rtmc3_chains,"post.mean"=posterior_mean);
ll$chain_set[[1]]
dim(ll$chain_set[[1]])
ll$chain_set[[1]][1,]
num
nsamples
dim(ll$chain_set[[1]])
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=10;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 2000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
l <- 1
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=20,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=20,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=10;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 2000;
Mult_Mattingly=array(0,c(3,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
library(parallel)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
beta_set <- seq(1,0.05,length.out=10);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- rtmc3(pdf,beta_set=beta_set,base=base, scale=1, cycle=20,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
Mult_Mattingly[2,l,,] <- rmc3(pdf,beta_set=beta_set, base=base, scale=1, cycle=20,
swap_adjacent=TRUE, nsamples=2000, verb=FALSE)$chain_set[[1]];
cat("We are at iter:",l, "\n")
}
KSval1=array(0,nsamples);
KSval2=array(0,nsamples);
for(d in 1:10)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval1[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval2[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval1,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval2,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("RTMC3","RMC3"),fill=c("red","blue"),border="black");
}
