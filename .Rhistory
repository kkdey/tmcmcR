plot(m2-m1, -log10(ebayes_fit.pvalue), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",pch=19,cex=0.2,lwd=1)
plot(m2-m1, -log10(pval), main="volcano",xlab="Effect size",ylab="-log10(pvalue)",pch=19,cex=0.2,lwd=1)
plot(m2-m1, -log10(res$qvalue), main="volcano",xlab="Effect size",ylab="-log10(qvalue)",pch=19,cex=0.2,lwd=1)
read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt');
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
phase_mat <- read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt');
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
phase_mat_vec
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
dim(phase_mat)
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
dim(out)
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:3,legend=c("0 match","1 match","2 match"),fill=1:3)
table(phase_mat_vec)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1)
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1, main="Phase diagram: no. of genes=50")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
plot(out[,1],out[,2],col=phase_mat_vec+1, main=paste0("Phase diagram: no. of genes=",G))
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab=alpha(topic prop fluc),
ylab=gamma(freq fluc))
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.50.txt'));
G=50;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=200;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
require(geoR)
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
G=100;
out <- expand.grid(x=seq(0,1,length.out=100),y=seq(0,2/G,length.out=100))
phase_mat_vec <- matrix(phase_mat,nrow=100*100,byrow=TRUE);
plot(out[,1],out[,2],col=phase_mat_vec+1,
main=paste0("Phase diagram: no. of genes=",G),
xlab="alpha (topic prop fluc)",
ylab="gamma (freq fluc)")
legend("topleft",col=1:4,legend=c("no match","omega match","theta match","omega/theta match"),fill=1:4)
phase_mat1 <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.200.txt'));
phase_mat <- as.matrix(read.table('/Users/kushal/Documents/Matthew Stephens Project/counts_clustering/mat.phase.100.txt'));
phase_mat==phase_mat1
library(devtools)
.libPaths()
library(RcppEigen)
find.package("Rcpp")
install.packages("Rcpp")
install.packages("RInside")
library(Rcpp)
library(devtools)
normpdf <- function(x)
{
return (dnorm(x))
}
getwd()
setwd('/Users/kushal/Documents/tmcmc/tmcmcR')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
mean <- c(0,0,0);
Sd <- diag(3);
Sd
normpdf <- function(x)
{
return (dnorm(x,mean,Sd))
}
normpdf(c(1,2,1))
dmvnorm(x,mean,Sd)
library(mvtnorm)
dmvnorm(x,mean,Sd)
normpdf(c(1,2,1))
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd))
}
normpdf(c(1,2,1))
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
sourceCpp('tmcmc_update.cpp')
tmcmc_update(c(1,2,1),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(1,2,1),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(1,1,1),0.05,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
normpdf(c(-400,-400,-400))
normpdf(c(100,100,100))
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
normpdf(c(-400,-400,-400))
sourceCpp(tmcmc_update.cpp)
sourceCpp("tmcmc_update.cpp")
tmcmcUpdate(c(100,100,100),c(-1,-1,-1),500,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),0.05,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(-1,-1,-1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
normpdf(c(-400,-400,-400))
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.1,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
library(numDeriv)
hessian(normpdf,c(0,1,2))
eigen(hessian(normpdf,c(0,1,2)))
b <- sample(c(-1,+1),3)
b <- sample(c(-1,+1),3,replace=TRUE)
b
b <- sample(c(-1,+1),10,replace=TRUE)
b
b <- sample(c(-1,+1),20,replace=TRUE)
b
is.list(b)
is.matrix(b)
is.array(b)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
getwd()
sourceCpp('src/utils.cpp')
library(Rcpp)
sourceCpp('src/utils.cpp')
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
library(mvtnorm)
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)$chain
devtools::document()
devtools::document()
mean <- c(0,0,0);
Sd <- diag(3);
normpdf <- function(x)
{
return (dmvnorm(x,mean,Sd,log=TRUE))
}
tmcmcUpdate(c(0,0,0),c(1,1,1),0.5,normpdf)
normpdf(c(-400,-400,-400))
normpdf(c(100,100,100))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
x_temp <- rand_generate(pdf_2, method=method);
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
devtools::document()
devtools::document()
source('~/Documents/tmcmcR/R/rand_generate.R')
source('~/Documents/tmcmcR/R/select_inverse_temp.R')
devtools::document()
devtools::document()
devtools::document()
3 %% 500
3 %% 500 ==0
500 %% 500
library(Rcpp)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("my-vignette")
devtools::document()
devtools::use_rcpp()
Rcpp::sourceCpp('src/utils.cpp')
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x,mu_target, Sigma_target)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
pdf()
library(devtools)
install_github('kkdey/tmcmcR')
library(mcmc)
d=50;  ##  dimension of the simulated variable
nsamples=10000;##  sample size in eahc iteration/ replication
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
Mattingly_matrix <- 1000*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mnormt)
library(fMultivar)
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=1000,burn_in = NULL)
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
num=1;
burn_in=NULL
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
num=1;
chain[1,] <- base;
num <- 1
eps <- rnorm(1,0,scale);
scale <- 1
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
target_pdf <- pdf
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
chain[1,]
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- 100
if(num %% 100 ==0)
+       paste("The chain is at iteration:",num);
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
nsamples <- 1000
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
}
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
#if(num %% 100 ==0)
paste("The chain is at iteration:",num);
}
num
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
paste("The chain is at iteration:",num);
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain
if(num %% 100 ==0)
paste("The chain is at iteration:",num);
num <- num +1;
}
chain
dim(chain)
chain <- matrix(0, nsamples, length(base))
num=1;
chain[1,] <- base;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
nsamples
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num=2;
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[(num+1),] <- tmcmcUpdate(chain[num,],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num +1;
}
num
nsamples
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
while(num <= nsamples) {
num=num+1;
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
}
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 1
while(num <= nsamples) {
num=num+1;
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
}
num
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num + 1;
}
dim(chain)
1000 %% 100
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rnorm(1,0,scale);
b <- sample(c(-1,+1),length(base),replace=TRUE)
chain[num,] <- tmcmcUpdate(chain[(num-1),],b,eps,target_pdf)$chain;
# if(num %% 100 == 0)
paste("The chain is at iteration:",num);
num <- num + 1;
}
source('~/Documents/tmcmcR/R/tmcmc_metrop.R')
out <- tmcmc_metrop(pdf,base=base, scale=1,nsamples=1000,burn_in = NULL)
out
```{r echo=TRUE, eval=FALSE}
