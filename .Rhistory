b[,1:10]
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
nmove_size <- 10
nmove <- 10
nmove <- 100
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
rnorm(nmove_size,0,scale)
rnorm(10,0,1)
scale
scale <- 1
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
eps
length(eps)
dim(b)
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
library(parallel)
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
b
eps
nmove
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
num
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(tmcmcR)
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
install_github('kkdey/tmcmcR')
library(tmcmcR)
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(tmcmcR)
library(devtools)
install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
library(tmcmcR)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(tmcmcR)
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
library(tmcmcR)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
Rcpp.package.skeleton()
library(Rcpp)
Rcpp.package.skeleton()
Rcpp.package.skeleton()
library(tmcmcR)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(tmcmcR)
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
install_github('kkdey/tmcmcR')
library(tmcmcR)
install_github('kkdey/tmcmcR')
library(tmcmcR)
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(tmcmcR)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain
getwd()
setwd('src/utils.cpp')
source('src/utils.cpp')
source('src/Rcppexports.cpp')
sourceCpp('src/Rcppexports.cpp')
sourceCpp('src/utils.cpp')
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
m <- 1
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
target_pdf <- pdf
tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- tmcmcUpdate(chain[(num-1),],b[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
dim(trial_chains)
trial_chains
pi_trials <- lapply(trial_chains, function(x) target_pdf(trial_chains[[x]]))
x <- 1
target_pdf(trial_chains[[x]])
x <- 2
target_pdf(trial_chains[[x]])
x <- 4
target_pdf(trial_chains[[x]])
trial_chains[[1]]
trial_chains[[2]]
trial_chains[[5]]
trial_chains[[10]]
pi_trials <- lapply(1:nmove, function(x) target_pdf(trial_chains[[x]]))
pi_trials
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials
pi_trials - min(pi_trials)
pi_trials - max(pi_trials)
pi_trials_norm <- exp(pi_trials - max(pi_trials));
pi_trials_norm
sample(1:nmove, pi_trials_norm)
pi_trials_norm
sample(1:nmove, prob=pi_trials_norm)
sample(1:nmove, size=1,  prob=pi_trials_norm)
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- parallel::mclapply(1:(nmove-1),
function(m)
{
trial_chain <- tmcmcUpdate(move_candidate,b_rev[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
trial_chains_rev[[nmove]] <- chain[(num-1),];
tmcmcUpdate(move_candidate,b_rev[m,],eps[m],target_pdf)$chain
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- parallel::mclapply(1:(nmove-1),
function(m)
{
trial_chain <- tmcmcUpdate(move_candidate,b_rev[m,],eps[m],target_pdf)$chain;
return(trial_chain)
}, mc.cores=detectCores());
trial_chains_rev[[nmove]] <- chain[(num-1),];
trial_chains_rev
chain[1]
chain[1,]
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- chain[(num-1),]+ b[m]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- parallel::mclapply(1:(nmove-1),
function(m)
{
trial_chain <- move_candidate + b_rev[m,]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
trial_chains_rev[[nmove]] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[[x]])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- parallel::mclapply(1:nmove,
function(m)
{
trial_chain <- chain[(num-1),]+ b[m]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- parallel::mclapply(1:(nmove-1),
function(m)
{
trial_chain <- move_candidate + b_rev[m,]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
trial_chains_rev[[nmove]] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[[x]])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
b*eps
eps
b[1,]
b*eps[1,]
temp <- b*eps
temp[1,]
b[1,]
eps
eps[1]
b[1,]
b*eps[1,]
temp[1,]
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps;
trial_chains_rev[[nmove]] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[[x]])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps;
trial_chains_rev[nmove,] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
dim(b_rev)
trial_chains_rev <- move_candidate + b_rev*eps[1:(nmove-1)];
trial_chains_rev[nmove,] <- chain[(num-1),];
trial_chains_rev <- rbind(trial_chains_rev, chain[(num-1),]);
dim(trial_chains_rev)
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
acc_rate
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps[1:(nmove-1)];
trial_chains_rev <- rbind(trial_chains_rev, chain[(num-1),]);
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
