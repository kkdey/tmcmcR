trial_chain <- chain[(num-1),]+ b[m]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- parallel::mclapply(1:(nmove-1),
function(m)
{
trial_chain <- move_candidate + b_rev[m,]*eps[m];
return(trial_chain)
}, mc.cores=detectCores());
trial_chains_rev[[nmove]] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[[x]])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
b*eps
eps
b[1,]
b*eps[1,]
temp <- b*eps
temp[1,]
b[1,]
eps
eps[1]
b[1,]
b*eps[1,]
temp[1,]
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[[x]])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[[sample(1:nmove, size=1,  prob=pi_trials_norm)]];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps;
trial_chains_rev[[nmove]] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[[x]])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps;
trial_chains_rev[nmove,] <- chain[(num-1),];
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
dim(b_rev)
trial_chains_rev <- move_candidate + b_rev*eps[1:(nmove-1)];
trial_chains_rev[nmove,] <- chain[(num-1),];
trial_chains_rev <- rbind(trial_chains_rev, chain[(num-1),]);
dim(trial_chains_rev)
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
acc_rate
if(is.null(burn_in)) burn_in <- nsamples/3;
chain <- matrix(0, nsamples, length(base))
chain[1,] <- base;
num <- 2
while(num <= nsamples) {
eps <- rep(rnorm(nmove_size,0,scale), each=floor(nmove/nmove_size));
b <- t(sapply(1:nmove, function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains <- chain[(num-1),]+ b*eps;
pi_trials <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains[x,])))
pi_trials_norm <- exp(pi_trials - max(pi_trials));
move_candidate <- trial_chains[sample(1:nmove, size=1,  prob=pi_trials_norm),];
b_rev <- t(sapply(1:(nmove-1), function(l) sample(c(-1,+1),length(base),replace=TRUE)));
trial_chains_rev <- move_candidate + b_rev*eps[1:(nmove-1)];
trial_chains_rev <- rbind(trial_chains_rev, chain[(num-1),]);
pi_trials_rev <- unlist(lapply(1:nmove, function(x) target_pdf(trial_chains_rev[x,])))
pi_trials_norm_rev <- exp(pi_trials_rev - max(pi_trials_rev));
acc_rate <- min(1, sum(pi_trials_norm)/sum(pi_trials_norm_rev));
if(runif(1,0,1) < acc_rate) {chain[num,] <- move_candidate;}
else{ chain[num,] <- chain[(num-1),];}
if(verb){
if(num %% 500 == 0)
cat("The chain is at iteration:",num,"\n");
}
num <- num + 1;
}
library(tmcmcR)
install.packages("Rcpp")
library(Rcpp)
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=20;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
tmcmcR:::tmcmc_metrop(pdf, base=base, scale=1, nsamples=5000,burn_in = NULL)$chain
tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, nsamples=5000,burn_in = NULL)$chain
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=50;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::tmcmc_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::rwmh_metrop(pdf,base=base, scale=1,nsamples=5000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_TMCMC=array(0,nsamples);
KSval_MCMC=array(0,nsamples);
for(d in 1:40)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_MCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_MCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("TMCMC","RWMH"),fill=c("red","blue"),border="black");
}
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=20;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::tmcmc_metrop(pdf, base=base, scale=1, nsamples=5000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_TMCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC","TMCMC"),fill=c("red","blue"),border="black");
}
library(tmcmcR)
devtools::document()
install_github('kkdey/tmcmcR')
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=20;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::tmcmc_metrop(pdf, base=base, scale=1, nsamples=5000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_TMCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC","TMCMC"),fill=c("red","blue"),border="black");
}
devtools::document()
library(tmcmcR)
install_github('kkdey/tmcmcR')
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=10;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, nsamples=5000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::tmcmc_metrop(pdf, base=base, scale=1, nsamples=5000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_TMCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC","TMCMC"),fill=c("red","blue"),border="black");
}
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=30;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 5000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, nsamples=1000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::tmcmc_metrop(pdf, base=base, scale=1, nsamples=1000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_TMCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC","TMCMC"),fill=c("red","blue"),border="black");
}
nsamples <- 1000
KSval_TMCMC=array(0,nsamples);
KSval_mtry_TMCMC=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_TMCMC[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_TMCMC,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC","TMCMC"),fill=c("red","blue"),border="black");
}
install_github('kkdey/tmcmcR')
library(tmcmcR)
devtools::document()
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=30;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 1000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=TRUE, samples=1000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=FALSE, samples=1000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_mtry_TMCMC_v1=array(0,nsamples);
KSval_mtry_TMCMC_v2=array(0,nsamples);
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=30;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 1000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=TRUE, nsamples=1000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=FALSE, nsamples=1000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_mtry_TMCMC_v1=array(0,nsamples);
KSval_mtry_TMCMC_v2=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC_v1[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_mtry_TMCMC_v2[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC_v1,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_mtry_TMCMC_v2,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC_V1","mtry_TMCMC_V2"),fill=c("red","blue"),border="black");
}
devtools::document()
install_github('kkdey/tmcmcR')
library(devtools)
#install_github('kkdey/tmcmcR')
library(tmcmcR)
library(mcmc)
d=30;  ##  dimension of the simulated variable
L=30; ###   the number of replications we use for finding KS statistic
nsamples <- 1000;
Mult_Mattingly=array(0,c(2,L,nsamples,d));
mu_target=rep(0,d);
Sigma_target = 0.01*diag(1/(1:(d))*d);
L=30; ###   the number of replications we use for finding KS statistic
Mult_Mattingly=array(0,c(2,L,nsamples,d));
Mattingly_matrix <- 100*(diag(1-0.7,d)+0.7*rep(1,d)%*%t(rep(1,d)));
library(mvtnorm)
pdf = function(x)
{
return (dmvnorm(x,mu_target,Sigma_target,log=TRUE)-t(x)%*%Mattingly_matrix%*%x)
}
base=rnorm(d,0,1);
for ( l in 1:L)
{
Mult_Mattingly[1,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=TRUE, nsamples=1000,burn_in = NULL)$chain;
Mult_Mattingly[2,l,,] <- tmcmcR:::mt_tmcmc_metrop(pdf, base=base, scale=1,nmove_size=5, nmove=50, revgen=FALSE, nsamples=1000,burn_in = NULL)$chain;
cat("We are at iter:",l, "\n")
}
KSval_mtry_TMCMC_v1=array(0,nsamples);
KSval_mtry_TMCMC_v2=array(0,nsamples);
for(d in 1:30)
{
for(n in 1:nsamples)
{
simulate.vec <- rnorm(L,mu_target[d],Sigma_target[d,d]/(sqrt(2*Sigma_target[d,d]^2+1)));
KSval_mtry_TMCMC_v1[n]=ks.test(Mult_Mattingly[1,,n,d],simulate.vec)$statistic;
KSval_mtry_TMCMC_v2[n]=ks.test(Mult_Mattingly[2,,n,d],simulate.vec)$statistic;
}
plot(1:nsamples,KSval_mtry_TMCMC_v1,col="red",type="l",lwd=1,pch=2,xlab="",ylab="")
lines(1:nsamples,KSval_mtry_TMCMC_v2,col="blue",lwd=1,pch=3)
title(xlab="Time step of run");
title(ylab="KS test distance");
title(main="KS plot comparison");
legend("topright",c("mtry_TMCMC_V1","mtry_TMCMC_V2"),fill=c("red","blue"),border="black");
}
d
warning()
warnings()
nsamples
